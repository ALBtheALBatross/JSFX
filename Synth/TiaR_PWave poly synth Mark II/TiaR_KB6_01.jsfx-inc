//@noindex

desc: MIDI KB6 library rev 01
/*
 Copyright 2014, Thierry Rochebois
 All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:
  Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer. 

  Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution. 

  The name of Thierry Rochebois may not be used to endorse or promote
  products derived from this software without specific prior written
  permission. 

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
//______________________________________________________________________
//                                                              Features

// bend       [-1 1[
// modWheel   [ 0 1[
// expression [ 0 1]
//______________________________________________________________________
//                                                                 USAGE
//______________________________________________________________________
//                                                                 Ideas



//______________________________________________________________________
@init
function KB6_f(v*, note, vel) (
  v.noteOn = note;
  v.noteVel = vel; 
  v.activity = 1;
  v.trig = 1;
);


function activity_f6(v1*, v2*, v3*, v4*, v5*, v6*, note, vel) (
v1.activity < v2.activity ?
  v1.activity < v3.activity ?
    v1.activity < v4.activity ?
      v1.activity < v5.activity ?  
        v1.activity < v6.activity ? KB6_f(v1, note, vel) : KB6_f(v6, note, vel)
      : v5.activity < v6.activity ? KB6_f(v5, note, vel) : KB6_f(v6, note, vel)
    : v4.activity < v5.activity ?  
        v4.activity < v6.activity ? KB6_f(v4, note, vel) : KB6_f(v6, note, vel)
      : v5.activity < v6.activity ? KB6_f(v5, note, vel) : KB6_f(v6, note, vel)
  : v3.activity < v4.activity ?
      v3.activity < v5.activity ?  
        v3.activity < v6.activity ? KB6_f(v3, note, vel) : KB6_f(v6, note, vel)
      : v5.activity < v6.activity ? KB6_f(v5, note, vel) : KB6_f(v6, note, vel)
    : v4.activity < v5.activity ?  
        v4.activity < v6.activity ? KB6_f(v4, note, vel) : KB6_f(v6, note, vel)
      : v5.activity < v6.activity ? KB6_f(v5, note, vel) : KB6_f(v6, note, vel)
: v2.activity < v3.activity ?
    v2.activity < v4.activity ?
      v2.activity < v5.activity ?  
        v2.activity < v6.activity ? KB6_f(v2, note, vel) : KB6_f(v6, note, vel)
      : v5.activity < v6.activity ? KB6_f(v5, note, vel) : KB6_f(v6, note, vel)
    : v4.activity < v5.activity ?  
        v4.activity < v6.activity ? KB6_f(v4, note, vel) : KB6_f(v6, note, vel)
      : v5.activity < v6.activity ? KB6_f(v5, note, vel) : KB6_f(v6, note, vel)
  : v3.activity < v4.activity ?
      v3.activity < v5.activity ?  
        v3.activity < v6.activity ? KB6_f(v3, note, vel) : KB6_f(v6, note, vel)
      : v5.activity < v6.activity ? KB6_f(v5, note, vel) : KB6_f(v6, note, vel)
    : v4.activity < v5.activity ?  
        v4.activity < v6.activity ? KB6_f(v4, note, vel) : KB6_f(v6, note, vel)
      : v5.activity < v6.activity ? KB6_f(v5, note, vel) : KB6_f(v6, note, vel) ;
);
//______________________________________________________________________
//                                                            ressources
function KB6()
  local() ( 
  KB6_tNoteOff = ad; ad += 1024;
  channel = 16;
  expression = 1;
  bend = 0;
);
  
//______________________________________________________________________
/* _recv(maxoffset,ofs*,msg1*,msg23*) returns midi info

   internals:
   _mib : message in buffer
   _ofs : internal offset of last overmaxoffset
   _msg1
   _msg23
   
   outputs:
   mib
   ofs
   msg1
   msg23
   en sortie
*/
// tester le passage de namespace
function f_recv(maxOffset)
local (mib) (
  // todo : after testing put _mib _ofs _msg1 _msg23 into local
  //nothing in the buffer
  !_mib ? (
    _mib = midirecv(_ofs, _msg1, _msg23);
  ); 
  _mib && _ofs <= maxOffset ? (
    mib   = 1;
    ofs   = _ofs;
    msg1  = _msg1;
    msg23 = _msg23;
    _mib = 0;
  ) : (
    msg1 = msg2 = mib = 0;
  );
  mib; // return value
  
  
);
//______________________________________________________________________
//                                                         Use in @block
//Tous les v ont:
// un tableau tNoteOff adress� par la variable globale cpNoteOff
// noteOn
// activity

function KB6_proc(maxOffset, v1*, v2*, v3*, v4*, v5*, v6*)
  local( status dataL dataH vel activeNote n note) (
  
  KB6_cpNoteOff = 0; //variable globale
      
  while (
   // midirecv(ofs, msg1, msg23) ? (
     f_recv(maxOffset) ? (
      status = msg1 & 240;
      (channel === 16 || channel === (msg1 & 15)) ? (
        dataL = msg23 & 127;
        dataH = (msg23/256)|0;
  // _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
  //                                                           Note on/off
        (status === 9 * 16 || status === 8 * 16) ? (      
          status === 8 * 16 ? vel = 0 : vel = dataH;
          note = dataL;
          
          vel === 0 && cpNoteOff < 1024 ? (
            KB6_tNoteOff[KB6_cpNoteOff] = note;        
            KB6_cpNoteOff += 1;
          ) : (
            activity_f6(v1,v2,v3,v4,v5,v6, note, vel);
          );
  
        );
  // _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
  //                                                                    CC
        status === 11 * 16 ? (     
          dataL ===  1      ? KB6_modWheelH = dataH;
          dataL ===  1 + 32 ? KB6_modWheelL = dataH;
          dataL === 11      ? expression = dataH/127;
          KB6_modWheel = (KB6_modWheelH + KB6_modWheelL / 128 ) / 128;
          dataL === 123 ? ( // all notes off
            gate = 0;
            n = 0; loop(128, KB6_tV[n] = 0; n += 1; );
            bend = 0;
            expression = 1;
            KB6_modWheelL = 0; KB6_modWheelH = 0; KB6_modWheel = 0;
          );
        );
  // _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
  //                                                            aftertouch
        status === 13 * 16 ? (
          KB6_aftertouch = dataL*(1/127);
        );
  // _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
  //                                                            pitch bend
        status === 14 * 16 ? (
          bend = dataH * 128 + dataL;
          bend = (bend - 8192);
          bend < 0 ? bend *= (1.0 / 8192)
                   : bend *= (1.0 / 8191);
        );
  // _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
      );
      midisend(ofs, msg1, msg23);
    ); // midirecv
  ); // while
  v1.VOX_procNoteOff();
  v2.VOX_procNoteOff();
  v3.VOX_procNoteOff();
  v4.VOX_procNoteOff();
  v5.VOX_procNoteOff();
  v6.VOX_procNoteOff();
  

);

//______________________________________________________________________
//                                               use in @init or @slider
//                                      0 -> 15 mdi channel    16 -> all
function KB6_setChannel(newChannel)
  local(n) (
  channel !== (newChannel|0) ? (
    //All notes off if we change the receive channel
    gate = 0;
    n = 0; loop(128, KB6_tV[n] = 0; n += 1; );
    expression = 0;
    bend = 0;
    KB6_modWheelL = 0; KB6_modWheelH = 0; modWheel = 0;
    channel = newChannel|0;
  );
);
//______________________________________________________________________
//              must be called at the end of the k subsection in @sample
function KB6_kProc()
  local() (
  // smoothing to avoid clics.
  modWheel += 0.05 * (KB6_modWheel - modWheel);
  aftertouch += 0.05 * (KB6_aftertouch - aftertouch);

);






